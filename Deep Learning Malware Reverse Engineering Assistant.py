import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
from torch.utils.data import TensorDataset, DataLoader

# Synthetic data: 28x28 images, like MNIST
np.random.seed(42)
images = np.random.rand(100, 1, 28, 28)
labels = np.random.randint(0, 2, 100)  # 0: benign, 1: malware

dataset = TensorDataset(torch.tensor(images, dtype=torch.float32), torch.tensor(labels, dtype=torch.long))
loader = DataLoader(dataset, batch_size=10)

# CNN model
class CNN(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv = nn.Conv2d(1, 3, 3)
        self.pool = nn.MaxPool2d(2)
        self.fc = nn.Linear(3*13*13, 2)

    def forward(self, x):
        x = self.pool(torch.relu(self.conv(x)))
        x = x.view(-1, 3*13*13)
        return self.fc(x)

model = CNN()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.01)

# Train
for epoch in range(3):
    for imgs, lbls in loader:
        optimizer.zero_grad()
        output = model(imgs)
        loss = criterion(output, lbls)
        loss.backward()
        optimizer.step()

print(f"CNN trained with final loss {loss.item():.4f}")