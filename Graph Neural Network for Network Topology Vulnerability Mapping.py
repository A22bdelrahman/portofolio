import torch
import torch.nn as nn
import numpy as np
import networkx as nx

# Create a small graph
G = nx.karate_club_graph()
adj = nx.to_numpy_array(G)
features = np.eye(G.number_of_nodes())  # One-hot
labels = np.random.randint(0, 2, G.number_of_nodes())  # Mock vulnerabilities

adj_t = torch.tensor(adj, dtype=torch.float32)
feat_t = torch.tensor(features, dtype=torch.float32)
labels_t = torch.tensor(labels, dtype=torch.long)

# Simple GCN layer
class GCNLayer(nn.Module):
    def __init__(self, in_feat, out_feat):
        super().__init__()
        self.fc = nn.Linear(in_feat, out_feat)

    def forward(self, adj, feat):
        return torch.relu(self.fc(torch.mm(adj, feat)))

model = GCNLayer(feat_t.shape[1], 2)
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)
criterion = nn.CrossEntropyLoss()

# Train
for epoch in range(5):
    optimizer.zero_grad()
    output = model(adj_t, feat_t)
    loss = criterion(output, labels_t)
    loss.backward()
    optimizer.step()

print(f"GCN trained with final loss {loss.item():.4f}")